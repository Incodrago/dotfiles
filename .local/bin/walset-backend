#!/bin/bash

# Helper function
hex_to_rgba() {
    local hex=$1
    local alpha=$2
    hex=${hex#"#"}  # remove #
    local r=$((16#${hex:0:2}))
    local g=$((16#${hex:2:2}))
    local b=$((16#${hex:4:2}))
    echo "rgba($r,$g,$b,$alpha)"
}

# Path to store the last wallpaper path to
LAST_WALLPAPER_FILE="$HOME/.cache/last_wallpaper.txt"

# Path to load the pywal colors from
WAL_JSON="$HOME/.cache/wal/colors.json"

# Path for apps that will need to get the new colors we generate
SWAYNC_COLORS="$HOME/.config/swaync/colors.css"
GTK_COLORS="$HOME/.config/gtk-3.0/colors.css"
HYPR_COLORS="$HOME/.config/hypr/pywal-colors.conf"

# Check if the user provided an argument
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <path_to_image>"
    exit 1
fi

IMAGE="$1"

# Send notification to the user
notify-send "Changing Theme" "Applying new wallpaper and updating colors, please wait until confirmation..."

# Set wallpaper
#swww img "$IMAGE" --transition-type="grow" --transition-duration="1" --transition-fps="60"

# Generate small wallpaper version for rofi (background job)
(
    OUTPUT="$HOME/.config/rofi/background.png"
    SCREEN_WIDTH=$(xdpyinfo | awk '/dimensions:/ {print $2}' | cut -d'x' -f1)
    SCREEN_HEIGHT=$(xdpyinfo | awk '/dimensions:/ {print $2}' | cut -d'x' -f2)
    # Rofi window size (same as the CSS)
    ROFI_WIDTH=$(( SCREEN_WIDTH * 40 / 100 ))
    ROFI_HEIGHT=$(( SCREEN_HEIGHT * 50 / 100 ))
    # Imagebox width = half of Rofi window (minus margins/padding)
    IMAGEBOX_WIDTH=$(( (ROFI_WIDTH - 32) / 2 ))
    IMAGEBOX_HEIGHT=$ROFI_HEIGHT
    # Crop left portion of wallpaper to match imagebox size (ImageMagick)
    # Preserves aspect ratio by resizing first to match height, then crop width
    magick "$IMAGE" -resize x$IMAGEBOX_HEIGHT -gravity west -crop ${IMAGEBOX_WIDTH}x${IMAGEBOX_HEIGHT}+0+0 +repage "$OUTPUT"
) &


# Generate pywal colors
wal -i "$IMAGE" -n -t -e

# Generate the colors
BG=$(jq -r '.special.background' "$WAL_JSON") # background color, equivalent to color0
FG=$(jq -r '.special.foreground' "$WAL_JSON") # text color, equivalent to color7
ERROR=$(jq -r '.colors.color1' "$WAL_JSON") # errors, 1st accent
SUCCESS=$(jq -r '.colors.color2' "$WAL_JSON") # success, 2nd accent
WARNING=$(jq -r '.colors.color3' "$WAL_JSON") # warnings, highlights
INFO=$(jq -r '.colors.color4' "$WAL_JSON") # info, 3rd accent
ACCENT=$(jq -r '.colors.color5' "$WAL_JSON") # 4th accent
ACCENT2=$(jq -r '.colors.color6' "$WAL_JSON") # 5th accent
ACCENT3=$(jq -r '.colors.color8' "$WAL_JSON") # 6th accent
BG_TRANSPARENT=$(hex_to_rgba "$BG" "0.8")

# Generate hyprland conf with the new colors
cat > "$HYPR_COLORS" <<EOF
# Generated by walset-backend
general {
    col.active_border = rgba(${SUCCESS:1}ee) rgba(${ACCENT:1}ee) 45deg
    col.inactive_border = rgba(${BG:1}aa)
}
EOF
hyprctl reload

# GTK colors
cat > "$GTK_COLORS" <<EOF
@define-color wal_bg_color $BG;
@define-color wal_fg_color $FG;
@define-color wal_accent_color $SUCCESS;
EOF

# swaync colors
cat > "$SWAYNC_COLORS" <<EOF
@define-color background $BG;
@define-color background_transparent $BG_TRANSPARENT;
@define-color foreground $FG;
@define-color accent $SUCCESS;
@define-color accent2 $ACCENT;
@define-color accent3 $ACCENT2;
@define-color accent4 $ACCENT3;
@define-color border $ERROR;
@define-color urgent $WARNING;
@define-color info $INFO;
EOF

# Refresh waybar
pkill -SIGUSR2 waybar
#pkill waybar
#waybar > /dev/null 2>&1 &

# Refresh swaync
swaync-client --reload-config --reload-css
#pkill swaync
#swaync > /dev/null 2>&1 &

# Save wallpaper path so swww can find it on boot
echo "$HOME/.config/wallpapers/$IMAGE" > "$LAST_WALLPAPER_FILE"

# Update hyprlock.conf to use this wallpaper as lock screen image
HYPRLOCK_CONF="$HOME/.config/hypr/hyprlock.conf"
sed -i "/^background {/,/^}/ s|^\s*path = .*|    path = $(<"$LAST_WALLPAPER_FILE")|" "$HYPRLOCK_CONF"

# Update hyprlock input colors
FG_RGBA=$(hex_to_rgba "$FG" 1.0)       # for font_color
ACCENT_RGBA=$(hex_to_rgba "$SUCCESS" 1.0) # for outer_color & check_color
FAIL_RGBA=$(hex_to_rgba "$ERROR" 1.0)   # for fail_color
sed -i "/^input-field {/,/^}/ s|^\s*font_color = .*|    font_color = $FG_RGBA|" "$HYPRLOCK_CONF"
sed -i "/^input-field {/,/^}/ s|^\s*outer_color = .*|    outer_color = $ACCENT_RGBA $ACCENT_RGBA 45deg|" "$HYPRLOCK_CONF"
sed -i "/^input-field {/,/^}/ s|^\s*check_color = .*|    check_color = $ACCENT_RGBA $ACCENT_RGBA 120deg|" "$HYPRLOCK_CONF"
sed -i "/^input-field {/,/^}/ s|^\s*fail_color = .*|    fail_color = $FAIL_RGBA $FAIL_RGBA 40deg|" "$HYPRLOCK_CONF"

# Update Zen Browser colors (Symlink pywal colors for Firefox/Zen)
PROFILE_DIR=$(find ~/.zen -maxdepth 1 -type d -name "*.Default (release)*" 2>/dev/null | head -n 1)
echo "$PROFILE_DIR"
if [ -n "$PROFILE_DIR" ]; then
    mkdir -p "$PROFILE_DIR/chrome"
    ln -sf "$HOME/.cache/wal/colors.css" "$PROFILE_DIR/chrome/colors.css"
fi

# Set wallpaper
swww img "$IMAGE" --transition-type="grow" --transition-duration="1" --transition-fps="60"


notify-send "Theme Applied" "Wallpaper and theme updated successfully!"
